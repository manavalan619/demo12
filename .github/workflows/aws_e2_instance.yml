name: aws_ec2_deployments_for_nightchech
on:
  push:
    branches: 
      - master
      - geppetto
      - main
  pull_request:
    branches: 
      - master
      - geppetto
      - main
env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ROLE_FOR_FARGATE: ${{  secrets.AWS_ROLE_FOR_FARGATE  }}
  AWS_ACCESS_KEY_ID: ${{  secrets.AWS_ACCESS_KEY_ID  }}
  AWS_SECRET_ACCESS_KEY: ${{  secrets.AWS_SECRET_ACCESS_KEY  }}
  AWS_REGION: ${{  secrets.AWS_REGION  }}
  AWS_VPC_SUBNET: ${{  secrets.AWS_VPC_SUBNET  }}
  AWS_VPC_SECURITY_GROUP: ${{  secrets.AWS_VPC_SECURITY_GROUP  }}
  AWS_ECS_CLUSTER_NAME: ${{  secrets.AWS_ECS_CLUSTER_NAME  }}
  PROJECT_NAME: nightchech-3755
  AWS_S3_BUCKET_NAME: nightchech-3755
  BACKEND_URL: 54.204.228.248

jobs:
  # Prerequisites:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Configure the aws cli
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{  env.AWS_ACCESS_KEY_ID  }}
  #         aws-secret-access-key: ${{  env.AWS_SECRET_ACCESS_KEY  }}
  #         aws-region: ${{  env.AWS_REGION  }}
  #     - name: Creating the S3 bucket
  #       run: aws s3api create-bucket --bucket ${{ env.AWS_S3_BUCKET_NAME }} --region us-east-1
  #     - name: Creating the aws ECR for each micro service
  #       run: |
  #         aws ecr create-repository --repository-name geppetto-generatedcode-nightchech-3755-apigateway  --image-scanning-configuration scanOnPush=true  --region us-east-1
  #         aws ecr create-repository --repository-name geppetto-generatedcode-nightchech-3755-authproxy  --image-scanning-configuration scanOnPush=true  --region us-east-1
  #         aws ecr create-repository --repository-name geppetto-generatedcode-nightchech-3755-camunda  --image-scanning-configuration scanOnPush=true  --region us-east-1
  #         aws ecr create-repository --repository-name geppetto-generatedcode-nightchech-3755-securitymanager  --image-scanning-configuration scanOnPush=true  --region us-east-1
  #         aws ecr create-repository --repository-name geppetto-generatedcode-nightchech-3755-school  --image-scanning-configuration scanOnPush=true  --region us-east-1
  # Build_and_upload_docker_iamges_to_ECR:
  #   needs: Prerequisites
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Configure the aws cli
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{  env.AWS_ACCESS_KEY_ID  }}
  #         aws-secret-access-key: ${{  env.AWS_SECRET_ACCESS_KEY  }}
  #         aws-region: ${{  env.AWS_REGION  }}
  #     - name: Checkout_Repo
  #       uses: actions/checkout@v2
  #     - name: Login to AWS ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #     - name: Build, tag, and push image to Amazon ECR
  #       env:
  #         ECR_REGISTRY: ${{  steps.login-ecr.outputs.registry  }}
  #         IMAGE_TAG: 1
  #       run: |
     
  #         cd application/services/default_services/authproxy
  #         docker build -t $ECR_REGISTRY/geppetto-generatedcode-nightchech-3755-authproxy:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/geppetto-generatedcode-nightchech-3755-authproxy:$IMAGE_TAG
  #         echo "Successfully build the docker image for authproxy  and pushed to aws ecr"

  #         cd ../camunda
  #         docker build -t $ECR_REGISTRY/geppetto-generatedcode-nightchech-3755-camunda:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/geppetto-generatedcode-nightchech-3755-camunda:$IMAGE_TAG
  #         echo "Successfully build the docker image for camunda  and pushed to aws ecr"

  #         cd ../securitymanager
  #         docker build -t $ECR_REGISTRY/geppetto-generatedcode-nightchech-3755-securitymanager:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/geppetto-generatedcode-nightchech-3755-securitymanager:$IMAGE_TAG
  #         echo "Successfully build the  docker image for securitymanager and pushed to aws ecr"

  #         cd ../../custom_services/apigateway
  #         docker build -t $ECR_REGISTRY/geppetto-generatedcode-nightchech-3755-apigateway:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/geppetto-generatedcode-nightchech-3755-apigateway:$IMAGE_TAG
  #         echo "Successfully build the docker image for apigateway and pushed to aws ecr"

  #         cd ../school
  #         docker build -t $ECR_REGISTRY/geppetto-generatedcode-nightchech-3755-school:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/geppetto-generatedcode-nightchech-3755-school:$IMAGE_TAG
  #         echo "Successfully build the docker image for school and pushed to aws ecr"
     
  Deploy_backend:
    runs-on: ubuntu-latest
    outputs:
        public_ip: ${{ steps.networkconfig.outputs.PUBLIC_IP_ADDRESS }}
    steps:
      - name: Check the  branch
        uses: actions/checkout@v2
      - name: Installing the Node
        uses: actions/setup-node@v1
        with:
          node-version: 10
      - name: Convert the task_defination.ts to json
        working-directory: .github/workflows
        run: |
          AWS_ACCOUNT_ID="${{ env.AWS_ACCOUNT_ID }}" AWS_ROLE_FOR_FARGATE="${{ env.AWS_ROLE_FOR_FARGATE }}" node task-definition.ts >> task-definition.json
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{  env.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{  env.AWS_SECRET_ACCESS_KEY  }}
          aws-region: ${{  env.AWS_REGION  }}
      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: .github/workflows/task-definition.json
      #     container-name: mongo-3755
      #     image: geppettotest/mongo-local:april2020
      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     cluster: ${{  env.AWS_ECS_CLUSTER_NAME  }}
      #     wait-for-service-stability: true
      - name: Run the ECS task definition
        
        run: | 
          echo "::set-output name=INSTANCE_DEV::$(aws ecs describe-tasks --cluster Cost-Estimation-Testing --tasks Cost-Estimation-Testing/13a8f4e17785468ea55033573e9e1c4e | jq '.tasks[].attachments[].details[1].value')"
          mano=$(aws ecs describe-tasks --cluster Cost-Estimation-Testing --tasks Cost-Estimation-Testing/13a8f4e17785468ea55033573e9e1c4e | jq '.tasks[].attachments[].details[1].value')
          echo "$mano"
        env:
          ipaddress: $mano
      - name: check one more
        id: networkconfig
        run: |
          ipaddress=$(aws ec2 describe-network-interfaces --network-interface-ids ${{ env.ipaddress }})
          orgial=$(aws ec2 describe-network-interfaces --network-interface-ids ${{ env.ipaddress }}  | jq '.NetworkInterfaces[].PrivateIpAddresses[].Association.PublicIp')
          echo "::set-output name=PUBLIC_IP_ADDRESS::$(aws ec2 describe-network-interfaces --network-interface-ids ${{ env.ipaddress }}  | jq '.NetworkInterfaces[].PrivateIpAddresses[].Association.PublicIp')"
        env:
          AWS_S3_BUCKET_NAME: $orgial
  Upload_S3_Bucket:
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Install the node
        uses: actions/setup-node@v1
        with:
          node-version: 12  
      - name: Installing angular/cli
        run: npm install -g @angular/cli
      - name: Just for the testing
        working-directory: ./application/client/desktop/nightchech/src/environments
        env:
          ipaddress: ${{ needs.Deploy_backend.outputs.public_ip }}
        run: |
          ls
          rm -rf environment.prod.ts
          ls
          echo 'export const environment = { DESKTOP_API: `http://${{ env.ipaddress }}:8000/desktop`, MOBILE_API: `http://<Your Domain Name or Live IP address>`, production: true };' >> environment.prod.ts
          cat environment.prod.ts
      - name: Installing the node modules
        working-directory: ./application/client/desktop/nightchech
        run: |
          npm install
          npm i @ng-select/ng-select
      - name: Production build
        working-directory: ./application/client/desktop/nightchech
        run: |
          echo ${{ needs.Deploy_backend.outputs.public_ip }}
          ng build --configuration=production
         
      - uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --delete
        env:
          AWS_S3_BUCKET: ${{  env.AWS_S3_BUCKET_NAME  }}
          AWS_ACCESS_KEY_ID: ${{  env.AWS_ACCESS_KEY_ID  }}
          AWS_SECRET_ACCESS_KEY: ${{  env.AWS_SECRET_ACCESS_KEY  }}
          AWS_REGION: ${{  env.AWS_REGION  }}
          SOURCE_DIR: "application/client/desktop/nightchech/dist/nightchech"
      - name: Enable the static webhosting
        run: aws s3 website s3://${{ env.AWS_S3_BUCKET_NAME }}/ --index-document index.html --error-document error.html